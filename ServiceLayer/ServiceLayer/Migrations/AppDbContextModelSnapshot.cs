// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServiceLayer.DataContexts;

#nullable disable

namespace ServiceLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("ServiceLayer.Models.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ApplicationDate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Comment")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<int>("ShiftId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(17)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Ожидает одобрения");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.HasIndex("UserId");

                    b.ToTable("Assignment", (string)null);
                });

            modelBuilder.Entity("ServiceLayer.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("ServiceLayer.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("Id");

                    b.ToTable("Position", (string)null);
                });

            modelBuilder.Entity("ServiceLayer.Models.Salary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(9, 2)");

                    b.Property<DateTime>("EndDate")
                        .HasPrecision(0)
                        .HasColumnType("TEXT");

                    b.Property<int>("HoursCount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasPrecision(0)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Salary", (string)null);
                });

            modelBuilder.Entity("ServiceLayer.Models.SalaryImpact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(9, 2)");

                    b.Property<DateTime>("AppointmentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<int>("SalaryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SalaryId");

                    b.HasIndex("UserId");

                    b.ToTable("SalaryImpact", (string)null);
                });

            modelBuilder.Entity("ServiceLayer.Models.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasPrecision(0)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<int>("MaxEmployees")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("StartDate")
                        .HasPrecision(0)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(9)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Открыта");

                    b.HasKey("Id");

                    b.ToTable("Shift", (string)null);
                });

            modelBuilder.Entity("ServiceLayer.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("Patrionymic")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("PositionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("ServiceLayer.Models.Assignment", b =>
                {
                    b.HasOne("ServiceLayer.Models.Shift", "Shift")
                        .WithMany("Assignments")
                        .HasForeignKey("ShiftId")
                        .IsRequired()
                        .HasConstraintName("FK_Assignment_Shift");

                    b.HasOne("ServiceLayer.Models.User", "User")
                        .WithMany("Assignments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Assignment_User");

                    b.Navigation("Shift");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServiceLayer.Models.Notification", b =>
                {
                    b.HasOne("ServiceLayer.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Notification_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServiceLayer.Models.Salary", b =>
                {
                    b.HasOne("ServiceLayer.Models.User", "User")
                        .WithMany("Salaries")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Salary_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServiceLayer.Models.SalaryImpact", b =>
                {
                    b.HasOne("ServiceLayer.Models.Salary", "Salary")
                        .WithMany("SalaryImpacts")
                        .HasForeignKey("SalaryId")
                        .IsRequired()
                        .HasConstraintName("FK_SalaryImpact_Salary");

                    b.HasOne("ServiceLayer.Models.User", "User")
                        .WithMany("SalaryImpacts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_SalaryImpact_User");

                    b.Navigation("Salary");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServiceLayer.Models.User", b =>
                {
                    b.HasOne("ServiceLayer.Models.Position", "Position")
                        .WithMany("Users")
                        .HasForeignKey("PositionId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Position");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("ServiceLayer.Models.Position", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ServiceLayer.Models.Salary", b =>
                {
                    b.Navigation("SalaryImpacts");
                });

            modelBuilder.Entity("ServiceLayer.Models.Shift", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("ServiceLayer.Models.User", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Notifications");

                    b.Navigation("Salaries");

                    b.Navigation("SalaryImpacts");
                });
#pragma warning restore 612, 618
        }
    }
}
